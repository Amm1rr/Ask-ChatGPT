Build1=Default,com.ask.chatgpt,Premium
File1=Acme-Regular.ttf
File10=Changelog.txt
File11=Chat.bal
File12=chat1.png
File13=chat2.png
File14=clvAnswerRow.bal
File15=clvQuestionRow.bal
File16=clvWaitingText.bal
File17=coloritem.bal
File18=grammar.png
File19=gray-tipped.png
File2=angry2.png
File20=iran.png
File21=LeftDrawer.bal
File22=man.png
File23=menu.png
File24=Message.png
File25=montserrat-medium.ttf
File26=Notice.mp3
File27=numericrange.bal
File28=passworditem.bal
File29=PrefsJson.json
File3=apikeyitem.bal
File30=PROMPTS.md
File31=puton.png
File32=RightDrawer.bal
File33=roboto-regular.ttf
File34=settings.png
File35=Share.bal
File36=shortoptions.bal
File37=textitem.bal
File38=textitemmulti.bal
File39=timeitem.bal
File4=Bg-Chat01.jpg
File40=timeitem24.bal
File41=voice.png
File5=Bg-Chat03.jpg
File6=Bg-Chat05.jpg
File7=Bg-Chat09.jpg
File8=booleanitem.bal
File9=brain.png
FileGroup1=Default Group\Fonts
FileGroup10=Default Group
FileGroup11=Default Group\Designers
FileGroup12=Default Group\Images
FileGroup13=Default Group\Images
FileGroup14=Default Group\Designers
FileGroup15=Default Group\Designers
FileGroup16=Default Group\Designers
FileGroup17=Default Group\Designers\PreferenceDialog
FileGroup18=Default Group\Images
FileGroup19=Default Group\Images
FileGroup2=Default Group\Images
FileGroup20=Default Group\Images
FileGroup21=Default Group\Designers
FileGroup22=Default Group\Images
FileGroup23=Default Group\Images
FileGroup24=Default Group\Images
FileGroup25=Default Group\Fonts
FileGroup26=Default Group
FileGroup27=Default Group\Designers\PreferenceDialog
FileGroup28=Default Group\Designers\PreferenceDialog
FileGroup29=Default Group
FileGroup3=Default Group\Designers\PreferenceDialog
FileGroup30=Default Group
FileGroup31=Default Group\Images
FileGroup32=Default Group\Designers
FileGroup33=Default Group\Fonts
FileGroup34=Default Group\Images
FileGroup35=Default Group\Designers
FileGroup36=Default Group\Designers\PreferenceDialog
FileGroup37=Default Group\Designers\PreferenceDialog
FileGroup38=Default Group\Designers\PreferenceDialog
FileGroup39=Default Group\Designers\PreferenceDialog
FileGroup4=Default Group\Images
FileGroup40=Default Group\Designers\PreferenceDialog
FileGroup41=Default Group\Images
FileGroup5=Default Group\Images
FileGroup6=Default Group\Images
FileGroup7=Default Group\Images
FileGroup8=Default Group\Designers\PreferenceDialog
FileGroup9=Default Group\Images
Group=Default Group
Library1=b4xdraweradvanced
Library10=okhttputils2
Library11=phone
Library12=reflection
Library13=securemytext
Library14=sql
Library15=viewsex
Library16=xcustomlistview
Library17=xui views
Library2=b4xgifview
Library3=byteconverter
Library4=clipboard
Library5=contentresolver
Library6=core
Library7=designerutils
Library8=ime2
Library9=json
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="5" android:targetSdkVersion="31"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~~\n~AddActivityText(ACTION_PROCESS_TEXT,~\n~<intent-filter>~\n~   <action android:name="android.intent.action.SEND" />~\n~   <category android:name="android.intent.category.DEFAULT" />~\n~   <data android:mimeType="text/*" />~\n~</intent-filter>)~\n~'  <data android:mimeType="image/*" />~\n~~\n~SetApplicationAttribute(android:launchMode,  "singleTask")~\n~'SetActivityAttribute(main, android:launchMode, "standard")~\n~'SetActivityAttribute(ACTION_PROCESS_TEXT, android:launchMode, "singleTop")~\n~~\n~'For Creating custom Text Selection actions with ACTION_PROCESS_TEXT~\n~SetActivityAttribute(ACTION_PROCESS_TEXT, android:label, "Ask ChatGPT")~\n~AddActivityText(ACTION_PROCESS_TEXT,~\n~<intent-filter>~\n~	<action android:name="android.intent.action.PROCESS_TEXT" />~\n~	<category android:name="android.intent.category.DEFAULT" />~\n~	<data android:mimeType="text/plain" />~\n~</intent-filter>)~\n~~\n~~\n~'########## Transparent 		# First Method: Without Transparent Statusbar~\n~' این روش نور وضعیت رو سیاه رنگ میکنه ولی از طریق کد~\n~' نوار وضعیت رو شفاف کردم~\n~~\n~'SetActivityAttribute(ACTION_PROCESS_TEXT, android:theme, "@android:style/Theme.Translucent")~\n~'SetActivityAttribute (Reciver, android:theme, "@android:style/Theme.Translucent")~\n~~\n~'########## Transparent 		# Seconde Method: With Transparent Statusbar~\n~' این متد نوار وظیفه رو همرنگ پس زمینه میکنه ولی در هنگار اجرای اولیه ی اکتیویتی~\n~' یه لِگ کوچیک داره که زیاد جالب نیست، با جستجوی بیشتر احتمالا میشه مشکلش رو حل کرد.~\n~~\n~SetActivityAttribute(ACTION_PROCESS_TEXT, android:theme, "@style/Theme_Main")~\n~~\n~CreateResource (values, theme_main.xml,~\n~<resources>~\n~	<style name="Theme_Main" parent="android:Theme">~\n~		<item name="android:windowIsTranslucent">true</item>~\n~		<item name="android:windowBackground">@android:color/transparent</item>~\n~		<item name="android:windowContentOverlay">@null</item>~\n~		<item name="android:windowNoTitle">true</item>~\n~		<item name="android:windowIsFloating">true</item>~\n~		<item name="android:backgroundDimEnabled">false</item>~\n~	</style>~\n~</resources>~\n~)~\n~~\n~'########## PreferencesDialog~\n~SetActivityAttribute(main, android:windowSoftInputMode, adjustResize|stateHidden)~\n~
Module1=ACTION_PROCESS_TEXT
Module10=Starter
Module11=UpDown
Module2=Animation
Module3=ASFlowTabMenu
Module4=Bart
Module5=ChatN
Module6=CLVNested
Module7=General
Module8=PreferencesDialog
Module9=ResizingTextComponent
NumberOfFiles=41
NumberOfLibraries=17
NumberOfModules=11
Version=12.2
@EndOfDesignText@
#Region Project Attributes
	#ApplicationLabel: Ask ChatGPT
	#VersionCode: 16
	#VersionName: Develop
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#IgnoreWarnings: 12, 16
#End Region

#Region Activity Attributes
	#FullScreen: False
	#IncludeTitle: False
#End Region

#BridgeLogger: True

Sub Process_Globals
	Private OldIntent 				As Intent
	Private TextHolder				As String
	Private ColorLog				As Int 	= Colors.Magenta
	Public	Voicer 					As VoiceRecognition
	Public 	ActionBarHomeClicked 	As Boolean
	Public 	TextShared				As String
	Public  intpub					As Intent
	Public 	GetIsWorking 			As Boolean
	Public 	CheckMessageTimer		As Timer
	Private CheckMessageTimeOut		As Long	= -1
	
	Type Setting(FirstLang 		As String, _
				 SecondLang 	As String, _
				 Creativity 	As Int, _
				 AutoSend 		As Boolean, _
				 Memory 		As Boolean, _
				 APIKEY			As String, _
				 IsDevMode 		As Boolean, _ 'If its in Debug Mode, just for MySelf
				 LastTypeModel	As Int)
End Sub

Sub Globals
	Private ChatN1 				As ChatN
	Private ime 				As IME2
End Sub

Private Sub MyLog(text As String, color As Int, AlwaysShow As Boolean)
	General.MyLog("Main." & text, color, AlwaysShow)
End Sub

Private Sub CheckMessageTimer_Tick
	
	Log("CheckMessageTimer_Tick")
	
	If (Starter.MessageList.Size < 1) Then
		CheckMessageTimeOut = -1
		CheckMessageTimer.Enabled = False
		Return
	End If
	
	If (CheckMessageTimeOut = -1) Then
'		DateTime.DateFormat = "HH:mm:ss"
'		CheckMessageTimeOut = DateTime.Date(DateTime.Now)
		DateTime.SetTimeZone(0)
		CheckMessageTimeOut = DateTime.Now
'		Dim timeout As Int = (Starter.TIMEOUT/1000) / 60 '	=> 1.5 Minutes
	End If
	
'	If (ConvertTicks(CheckMessageTimeOut) > 1) Then	'	=> 1 Minutes
	
	Dim res As Period = DateUtils.PeriodBetween(CheckMessageTimeOut, DateTime.Now)
'	Log(res)
	If (res.Minutes > 1) Then	'	=> 1 Minutes
		CheckMessageTimeOut = -1
		CheckMessageTimer.Enabled = False
	End If
	
	CheckMessageList
	
End Sub

Public Sub ConvertTicks(t As Long) As Int
	Dim minutes As Int
'	Dim days , hours, minutes, seconds As Int
'	days = t / DateTime.TicksPerDay
'	hours = (t Mod DateTime.TicksPerDay) / DateTime.TicksPerHour
	minutes = (t Mod DateTime.TicksPerHour) / DateTime.TicksPerMinute
'	seconds = (t Mod DateTime.TicksPerMinute) / DateTime.TicksPerSecond
	
'	Dim day As Int = days
'	Dim hour As Int = NumberFormat(hours, 2, 0)
	Dim minu As Int = NumberFormat(minutes, 2, 0)
'	Dim seconds As Int = NumberFormat(seconds, 2, 0)
'	
'	Log (days & " days, " & NumberFormat(hours, 2, 0) & " hours, " _
'        & NumberFormat(minutes, 2, 0) & " minutes and " & NumberFormat(seconds, 2, 0) & " seconds")
	
	Return minu
	
End Sub

Sub Activity_Create(FirstTime As Boolean)
	
	MyLog("Activity_Create: " & FirstTime & ", " & TextShared, ColorLog, True)
	
	General.LoadSettingDB
	
	Starter.APIValidate
	
	CheckMessageTimer.Initialize("CheckMessageTimer", 1000)
	CheckMessageTimer.Enabled = False
	
	intpub = Activity.GetStartingIntent
	If Not (ChatN1.IsInitialized) Then ChatN1.Initialize(Activity, "")
'	If (TextShared = "[NEW]") Then
'		
'		LogColor("Main.Create [New]", Colors.Red)
'		
'		ChatN1.Initialize(Activity, "")
''		TextShared = ""
'
'	Else If (TextShared <> "") Then
'		
'		LogColor("Main.Create SHARED", Colors.Red)
'		
'		ChatN1.Initialize(Activity, TextShared)
'		intpub = Null
''		TextShared = ""
'	Else
'		
'		LogColor("Main.Create Else", Colors.Red)
'		
'		ChatN1.Initialize(Activity, "")
'		ChatN1.txtQuestion.RequestFocus
'	End If
	Activity.Title = "Ask ChatGPT"
	
	Voicer.Initialize("vr")
	
	ime.Initialize("ime")
	ime.AddHeightChangedEvent
	
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	
	TextHolder = ChatN1.txtQuestion.Text
	MyLog("Activity_Pause: " & TextHolder, ColorLog, True)
	ChatN1.IME_HeightChanged(100%y, 0)
	General.SaveSettingDB
	
	If (UserClosed) Then
		General.sql.Close
		StopService(Starter)
		Activity.Finish
		ExitApplication
	End If
	
End Sub

Sub Activity_Resume
	
	MyLog("Activity_Resume: " & TextShared, ColorLog, True)
	
	ChatN1.IME_HeightChanged(100%y, 0)
	
	intpub = Activity.GetStartingIntent
	
	If (TextShared = "[NEW]") Then
		LogColor("Main.Resume [New]", Colors.Red)
		
		ChatN1.ResetAI
		ChatN1.MessageIndex = -1
		ChatN1.clvMessages.Clear
		ChatN1.txtQuestion.Text = ""
		ChatN1.WriteQuestion(ACTION_PROCESS_TEXT.SharedQuestion)
		ChatN1.WriteAnswer(ACTION_PROCESS_TEXT.SharedText, True, ACTION_PROCESS_TEXT.SharedText, -1)
		TextShared = ""
		Sleep(0)
		
'	Else If IsRelevantIntent(Activity.GetStartingIntent) Then
	Else If IsRelevantIntent(intpub) Then
		
		LogColor("Main.Resume.SHARE", Colors.Red)
		
		Dim intent As JavaObject = Activity.GetStartingIntent
		
		Dim cType As String = intent.RunMethod("getType", Null)
		If Not (cType.Contains("text")) Then Return
		
		TextShared = Activity.GetStartingIntent.GetExtra("android.intent.extra.TEXT") 'Get the shared text
		
		Sleep(0)
		
		CallSubDelayed2(ACTION_PROCESS_TEXT, "Activity_Create", False)
'		ChatN1.ResetAI
'		ChatN1.txtQuestion.Text = TextShared
		
		TextShared = ""
		
		#Region Shared a Image
'		'### It's Image
'		Dim uri As String = intent.RunMethod("getParcelableExtra", Array("android.intent.extra.STREAM"))
'		Dim flag As Boolean
'		Try
'			Log("Loading bitmap from: " & uri)
'			Dim bmp As Bitmap = LoadBitmapResize("ContentDir", uri, 100%x, 100%y,flag)
'			Activity.SetBackgroundImage(bmp)
'		Catch
'			Log(LastException)
'		End Try
		#End Region
	
	Else If (TextShared <> "") Then
		LogColor("Main.Resume.OpenIn: " & TextShared, Colors.Red)
		ChatN1.ResetAI
		ChatN1.txtQuestion.Text = TextShared
		TextShared = ""
	Else If (TextHolder <> "") Then
		LogColor("Main.Resume: " & TextHolder, Colors.Red)
		ChatN1.ResetAI
		ChatN1.txtQuestion.Text = TextHolder
	Else
		'Do Somthing
		LogColor("Main.Resume.Else: " & TextShared & " - " & TextHolder, Colors.Red)
		
		CheckMessageList
	End If
	
End Sub

Public Sub CheckMessageList
	

	Log("CheckMessageList: " & Starter.MessageList)

	Try
		Dim lstDelete As List
			lstDelete.Initialize
		
		For i = Starter.MessageList.Size - 1 To 0 Step -1
			Dim stack 	As Map 		= Starter.MessageList.Get(i)
			Dim indx 	As Int 		= stack.GetDefault("QuestionIndex", 0)
			Dim resp 	As String 	= stack.GetDefault("Response", "")

			If (resp <> "") Then
				LogColor("Inside IF", Colors.Red)

				Dim ques As textMessage = ChatN1.clvMessages.GetValue(indx)
				Log("Question: " & ques)

				Dim answ As textMessage = ChatN1.clvMessages.GetValue(ChatN1.clvMessages.Size - 1)
				Log("Answer: " & answ)

				If (answ.msgtype = 3) Then '// 0: Answer 1: Question 3: WaitingText
					lstDelete.Add(i)

					ChatN1.WriteAnswer(resp, True, ques.Message, indx)
					ChatN1.AddtoHistory(ques.Message, resp)
				End If
			End If
		Next
		
		For i = lstDelete.Size - 1 To 0 Step -1
			Log(lstDelete.Get(i) & "/" & lstDelete.Size)
			Starter.MessageList.RemoveAt(lstDelete.Get(i))
		Next
		
	Catch
		Log(Starter.MessageList)
		Log(Starter.MessageList.Size)
		Log(LastException)
'		CheckMessageTimer.Enabled = True
	End Try
	
End Sub


'Public Sub CheckMessageList
'	
'	Dim count As Int = Starter.MessageList.Size - 1
'	Dim lstDelete As List
'		lstDelete.Initialize
'	
'	Log("CheckMessageList: " & Starter.MessageList)
'	
''	Try
'		For i = 0 To count
''			Log("Here " & i & "/" & count)
'			
'			Dim stack As Map = Starter.MessageList.Get(i)
''			Log(stack)
'			Dim indx As Int = stack.GetDefault("QuestionIndex", 0)
''			Log(indx)
'			Dim resp As String = stack.GetDefault("Response", "")
''			Log(resp)
'			
'			If (resp <> "") Then
'				
'				LogColor("Inside IF", Colors.Red)
'				
'				Dim ques As textMessage = ChatN1.clvMessages.GetValue(indx)
'				Log("Question: " & ques)
'				
'				Dim answ As textMessage = ChatN1.clvMessages.GetValue(ChatN1.clvMessages.Size-1)
'				Log("Answer: " & answ)
'				If (answ.msgtype = 3) Then '// 0: Answer 1: Question 3: WaitingText
'					
'					lstDelete.Add(i)
'					
'					ChatN1.WriteAnswer(resp, True, ques.Message, indx)
'					
'					ChatN1.AddtoHistory(ques.Message, resp)
'				End If
'				
'			End If
'		Next
'		
'		For i = 0 To lstDelete.Size - 1
'			Log(lstDelete.Get(i) & "/" & lstDelete.Size)
'			Starter.MessageList.RemoveAt(lstDelete.Get(i))
'		Next
'		
'		
''	Catch
''		Log(Starter.MessageList)
''		Log(Starter.MessageList.Size)
''		Log(LastException)
'''		CheckMessageTimer.Enabled = True
''	End Try
'	
'End Sub

Private Sub Activity_KeyPress (KeyCode As Int) As Boolean 'Return True to consume the event
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		If ChatN1.prefdialog.BackKeyPressed Then Return True
	End If
	Return False
End Sub

'Recive Text
Private Sub IsRelevantIntent(in As Intent) As Boolean
	MyLog("IsRelevantIntent", ColorLog, False)
	If in.IsInitialized And in <> OldIntent And in.Action = in.ACTION_SEND Then
		OldIntent = in
		Return True
	End If
	Return False
End Sub

Private Sub ShareText(text As String)
	MyLog("ShareText: " & text, ColorLog, False)
	Dim in As Intent
		in.Initialize(in.ACTION_SEND, "")
		in.PutExtra("android.intent.extra.TEXT", text)
		in.SetType("text/plain")
		in.WrapAsIntentChooser("Share Via")
	StartActivity(in)
End Sub

Private Sub SendToInstagram(text As String)
	MyLog("SendToInstagram: " & text, ColorLog, False)
	Dim u As Uri 'ContentResolver library
'	u.Parse("file://" & File.Combine(a, "tmpfile.jpg"))
	Dim inten As Intent
	Dim tmpt As String = "your text"
	inten.Initialize(inten.ACTION_SEND,"")
	inten.SetType("image/*")
	inten.PutExtra("android.intent.extra.STREAM",u)
	inten.PutExtra("android.intent.extra.TEXT",tmpt)
	inten.SetComponent("com.instagram.android/com.instagram.share.handleractivity.ShareHandlerActivity")
	StartActivity(inten)
End Sub

Private Sub SendToTwitter(text As String)
	MyLog("SendToTwitter: " & text, ColorLog, False)
	Dim u As Uri 'ContentResolver library
'	u.Parse("file://" & File.Combine(a, "tmpfile.jpg"))
	Dim tmpt  As String = "your text"
	Dim inten As Intent
		inten.Initialize(inten.ACTION_SEND,"")
		inten.SetType("image/*")
		inten.PutExtra("android.intent.extra.STREAM",u)
		inten.PutExtra("android.intent.extra.TEXT",tmpt)
		inten.SetComponent("com.twitter.android/com.twitter.composer.ComposerActivity")
	StartActivity(inten)
	
	Dim pm 	As PackageManager
    
	For Each cn As String In pm.QueryIntentActivities(inten)
		'Instagram
		If cn.SubString2(0,19) = "com.twitter.android" Then
'			Dim IntentTwitter As String = cn
			Exit
		End If
		
		'OR
		
		'Twitter
		If cn.SubString2(0,21) = "com.instagram.android" Then
'			Dim IntentInstagram As String = cn
			Exit
		End If
	Next
End Sub

#if Java
public boolean _onCreateOptionsMenu(android.view.Menu menu) {
	 processBA.raiseEvent(null, "create_menu", menu);
	 return true;
	
}
#End If
#End Region

'Program code should go into B4XMainPage and other pages.
